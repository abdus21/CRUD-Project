[{"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\index.js":"1","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\App.js":"2","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\page\\CreateProduct.jsx":"3","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\page\\GetAllProduct.jsx":"4","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\page\\UpdateProduct.jsx":"5","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\getAllProduct\\GetAllData.jsx":"6","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\createProduct\\CreateForm.jsx":"7","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\updateProduct\\UpdateForm.jsx":"8","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\common\\NavBar.jsx":"9","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\Helper\\ValidationHelper.js":"10","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\apis\\crud.js":"11","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\common\\FullScreenLoader.jsx":"12"},{"size":436,"mtime":1658081754226,"results":"13","hashOfConfig":"14"},{"size":589,"mtime":1658603751572,"results":"15","hashOfConfig":"14"},{"size":221,"mtime":1657819622344,"results":"16","hashOfConfig":"14"},{"size":221,"mtime":1657819606294,"results":"17","hashOfConfig":"14"},{"size":221,"mtime":1657819640091,"results":"18","hashOfConfig":"14"},{"size":3405,"mtime":1661943514692,"results":"19","hashOfConfig":"14"},{"size":4185,"mtime":1658126541841,"results":"20","hashOfConfig":"14"},{"size":4764,"mtime":1658412661168,"results":"21","hashOfConfig":"14"},{"size":979,"mtime":1658125111472,"results":"22","hashOfConfig":"14"},{"size":398,"mtime":1657866797062,"results":"23","hashOfConfig":"14"},{"size":2182,"mtime":1661954541915,"results":"24","hashOfConfig":"14"},{"size":384,"mtime":1657901340284,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1m632g2",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\index.js",[],[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\App.js",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\page\\CreateProduct.jsx",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\page\\GetAllProduct.jsx",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\page\\UpdateProduct.jsx",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\getAllProduct\\GetAllData.jsx",["65","66"],[],"import React from 'react';\r\nimport {Button, Card, Col, Container, Row, Table} from 'react-bootstrap'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport { Delete, GetAll } from '../../apis/crud';\r\nimport FullScreenLoader from '../common/FullScreenLoader'\r\nimport { ErrorToast, SuccessToast } from '../../Helper/ValidationHelper';\r\nimport { unstable_HistoryRouter } from 'react-router-dom';\r\n\r\nconst GetAllData = () => {\r\n  // state for get all data\r\n  const [data,setData] = useState([])\r\n\r\n      useEffect(()=>{\r\n\r\n        GetAll().then((res)=>{\r\n          setData(res)\r\n        }).catch(error=>{\r\n          console.log(error);\r\n        })\r\n\r\n      },[data]);\r\n\r\n      // delete button\r\n      const deleteBtn = (id)=>{\r\n        \r\n        Delete(id).then((result)=>{\r\n\r\n            SuccessToast(\"Delete success\");\r\n          \r\n        })\r\n      }\r\n\r\n\r\n     if(data.length>0){\r\n      return (\r\n        <div>\r\n          <Container>\r\n            <Row>\r\n              <Col>\r\n                  <Card className='border-0 shadow'>\r\n                    <Card.Body>\r\n                      <h6>Product List</h6>\r\n                      <Table>\r\n                        <thead>\r\n                          <tr className='text-muted' style={{fontSize:\"15px\"}}>\r\n                            <th>Product</th>\r\n                            <th>Unit Price</th>\r\n                            <th>Qty</th>\r\n                            <th>Total Price</th>\r\n                            <th style={{fontWeight:\"700\",fontSize:\"20px\"}}>Delete</th>\r\n                            <th style={{fontWeight:\"700\",fontSize:\"20px\"}}>Update</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {\r\n                           \r\n                           data?.map((items)=>\r\n                           <tr>\r\n                           <td className='d-flex'>\r\n                             <img style={{width:\"60px\",height:\"60px\",objectFit:\"cover\",borderRadius:\"15px\"}} src={items.Img} alt=\"\" /> &nbsp;\r\n                             <div>\r\n                               <h6 style={{fontSize:\"17px\",fontWeight:\"700\",marginBottom:\"0px\"}}>Smart Watch for Men</h6>\r\n                               <span style={{fontSize:\"14px\",fontWeight:\"500\"}}>{items.ProductCode}</span>\r\n                             </div>\r\n                           </td>\r\n                           <td>{items.UnitPrice}</td>\r\n                           <td>{items.Qty}</td>\r\n                           <td>{items.TotalPrice}</td>\r\n                           <td><Button onClick={()=>deleteBtn(items._id)} className='btn btn-danger'><i class='bx bxs-trash-alt'></i></Button></td>\r\n                           <td><Link className='btn btn-success' to={`/update/${items._id}`}><i class='bx bxs-edit-alt' ></i></Link></td>\r\n                         </tr>\r\n                           )\r\n                           }\r\n                          \r\n                        </tbody>\r\n                      </Table>\r\n                    </Card.Body>\r\n                  </Card>\r\n              </Col>\r\n            </Row>\r\n          </Container> \r\n           \r\n        </div>\r\n      )\r\n       \r\n     }else{\r\n\r\n      return (\r\n        <div>\r\n            <FullScreenLoader/>\r\n        </div>\r\n     )\r\n\r\n     }\r\n \r\n}\r\n\r\nexport default GetAllData","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\createProduct\\CreateForm.jsx",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\updateProduct\\UpdateForm.jsx",["67","68"],[],"import React, { useRef } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { getSingle, Update } from '../../apis/crud';\r\nimport { ErrorToast, isEmpty, SuccessToast } from '../../Helper/ValidationHelper';\r\nimport FullScreenLoader from '../common/FullScreenLoader';\r\n\r\nconst UpdateForm = () => {\r\n  const {id} = useParams();\r\n  let ProductName,ProductCode,Img,UnitPrice,Qty,TotalPrice,Loader = useRef();\r\n    const updateData = ()=>{\r\n        let Product_Name = ProductName.value\r\n        let Product_Code = ProductCode.value\r\n        let Image = Img.value\r\n        let Unit_Price = UnitPrice.value\r\n        let Qty_Price = Qty.value\r\n        let Total_Price = TotalPrice.value\r\n\r\n        \r\n        if(isEmpty(Product_Name)){\r\n            ErrorToast(\"Product Name Required\");\r\n        }else if(isEmpty(Product_Code)){\r\n            ErrorToast(\"Product Code Required\");\r\n        }else if(isEmpty(Image)){\r\n            ErrorToast(\"Product Image Required\");\r\n        }else if(isEmpty(Unit_Price)){\r\n            ErrorToast(\"Product Unit Price Required\");\r\n        }else if(isEmpty(Qty_Price)){\r\n            ErrorToast(\"Product Qty Price Required\");\r\n        }else if(isEmpty(Total_Price)){\r\n            ErrorToast(\"Product Total Price Required\");\r\n        }else{\r\n            Update(id,Product_Name,Product_Code,Image,Unit_Price,Qty_Price,Total_Price).then((result)=>{\r\n                SuccessToast(\"Data Update Success\");\r\n                if(result===true){\r\n                    SuccessToast(\"Data Update Success\");\r\n                    \r\n                }else{\r\n                    ErrorToast(\"Data Not Update\");\r\n                }\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n      getSingle(id).then((result)=>{\r\n         ProductName.value = result.ProductName\r\n         ProductCode.value = result.ProductCode\r\n         Img.value = result.Img\r\n         UnitPrice.value = result.UnitPrice\r\n         Qty.value = result.Qty\r\n         TotalPrice.value = result.TotalPrice\r\n      });\r\n    },[ProductName,ProductCode,Img,UnitPrice,Qty,TotalPrice]);\r\n\r\n  return (\r\n    <>\r\n       <div>\r\n        <Container> \r\n            <Row className='justify-content-center'>\r\n                <Col md={10}>\r\n                    <Card className='border-0 shadow'>\r\n                        <Card.Body>\r\n                        <h5 className='mb-4'>Update Product</h5>\r\n                            <Row>\r\n                        <Col className='mb-3' md={4}>\r\n                            <label htmlFor=\"\">Name</label>\r\n                            <input ref={(input)=>ProductName=input} type=\"text\" className='form-control' />\r\n                        </Col>\r\n                        <Col className='mb-3' md={4}>\r\n                            <label htmlFor=\"\">Product Code</label>\r\n                            <input ref={(input)=>ProductCode=input} type=\"text\" className='form-control' />\r\n                        </Col>\r\n                        <Col className='mb-3' md={4}>\r\n                            <label htmlFor=\"\">Image</label>\r\n                            <input ref={(input)=>Img=input} type=\"text\" className='form-control' />\r\n                        </Col>\r\n                        <Col className='mb-3' md={4}>\r\n                            <label htmlFor=\"\">Unit Price</label>\r\n                            <input ref={(input)=>UnitPrice=input} type=\"text\" className='form-control' />\r\n                        </Col>\r\n                        <Col className='mb-3' md={4}>\r\n                            <label htmlFor=\"\">Qty</label>\r\n                            <input ref={(input)=>Qty=input} type=\"text\" className='form-control' />\r\n                        </Col>\r\n                        <Col className='mb-3' md={4}>\r\n                            <label htmlFor=\"\">Total Price</label>\r\n                            <input ref={(input)=>TotalPrice=input} type=\"text\" className='form-control' />\r\n                        </Col>\r\n                </Row>\r\n                        <Row>\r\n                            <Col md={12} className='text-center mt-3'>\r\n                                <Button onClick={updateData} className='w-25  btn' style={{backgroundColor:\"#3a434c\"}}><Link className='text-decoration-none text-light' to='/'>Update</Link> </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            \r\n        </Container>\r\n    </div>\r\n    <div className='d-none' ref={(div)=>Loader=div}>\r\n        <FullScreenLoader />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateForm","C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\common\\NavBar.jsx",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\Helper\\ValidationHelper.js",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\apis\\crud.js",[],[],"C:\\Users\\DELL\\Desktop\\MERN\\CRUD-Project\\client\\src\\components\\common\\FullScreenLoader.jsx",[],[],{"ruleId":"69","severity":1,"message":"70","line":8,"column":10,"nodeType":"71","messageId":"72","endLine":8,"endColumn":20},{"ruleId":"69","severity":1,"message":"73","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":32},{"ruleId":"69","severity":1,"message":"74","line":11,"column":60,"nodeType":"71","messageId":"72","endLine":11,"endColumn":66},{"ruleId":"75","severity":1,"message":"76","line":58,"column":7,"nodeType":"77","endLine":58,"endColumn":61,"suggestions":"78"},"no-unused-vars","'ErrorToast' is defined but never used.","Identifier","unusedVar","'unstable_HistoryRouter' is defined but never used.","'Loader' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["79"],{"desc":"80","fix":"81"},"Update the dependencies array to be: [ProductName, ProductCode, Img, UnitPrice, Qty, TotalPrice, id]",{"range":"82","text":"83"},[2136,2190],"[ProductName, ProductCode, Img, UnitPrice, Qty, TotalPrice, id]"]